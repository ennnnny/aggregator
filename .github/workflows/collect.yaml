name: Collect
on:
  # executed once a week on Sundays at 00:00, disabled by default, uncomment and modify as needed
  schedule:
   - cron: "0 0 */4 * *"
  workflow_dispatch:

env:
  # time zone
  TZ: Asia/Shanghai

  # github access token
  GITHUB_PAT: ${{ secrets.PAT }}

  # github username and gist id, separated by '/'
  GIST_LINK: ${{ secrets.GIST_LINK }}

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: test

      - name: Prepare
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          architecture: "x64"
          cache: "pip"

      - name: Install
        run: pip3 install -r requirements.txt

      - name: Check
        run: |
          if [ -z "$GITHUB_PAT" ]; then
              echo "Error: environment 'GITHUB_PAT' cannot be empty"
              exit 1
          fi

          if [ -z "$GIST_LINK" ]; then
              echo "Error: environment 'GIST_LINK' cannot be empty"
              exit 1
          fi

          LINK_PARTS=$(echo "$GIST_LINK" | awk -F'/' 'NF==2 && $1!="" && $2!=""')
          if [ -z "$LINK_PARTS" ]; then
              echo "Error: environment 'GIST_LINK' is not valid, should be 'username/gist_id' format"
              exit 1
          fi

      - name: Collect
        run: python -u subscribe/collect.py --all --overwrite --skip

      - name: Timestamp
        run: date

      - name: Create/Update Gist
        run: |
          cd data
          
          python -c "
          import requests
          import json
          headers = {'Authorization': 'token ' + '${{ secrets.PAT }}'}
          response = requests.get('https://api.github.com/gists/${{ secrets.GIST_ID2 }}', headers=headers)
          if response.status_code == 200:
            data = json.loads(response.text)
            data2 = json.loads(data['files']['Sub-Store']['content'])
          
            file = open("subscribes.txt", "r")
            content = file.read()
            file.close()
            data2['subs'][2]['url'] = content
          
            data['files']['Sub-Store']['content'] = json.dumps(data2)
            json_data = json.dumps(data)
            update_response = requests.patch('https://api.github.com/gists/${{ secrets.GIST_ID2 }}', headers=headers, data=json_data)
          
            if update_response.status_code != 200:
                print('Failed to update Gist')
            else:
                print('Gist updated')
                requests.get('https://sub2.paomian.party/${{ secrets.SUBSTORE }}/api/utils/backup?action=download')
          else:
            print('Failed to get Gist')
          "

      - name: Upload file
        run: |
          timestamp=$(date +%s)
          tar -czvf "data-${timestamp}.tar.gz" data
          curl --location --request POST 'https://pic.paomian.party/api/upload?token=${{ secrets.TOKEN }}&tags=dingyue' --form "file=@data-${timestamp}.tar.gz"

